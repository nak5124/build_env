From ef6b9cc32525f723a8ecc1294fe12f1326f2f5e1 Mon Sep 17 00:00:00 2001
From: Yuta NAKAI <nak5124@live.jp>
Date: Sun, 19 Apr 2015 21:41:59 +0900
Subject: [PATCH 1/6] binutils: Check harder for the file in question being
 unusual (isatty() does see that).

---
 binutils/bucomm.c  | 21 ++++++++++++++++++---
 binutils/elfedit.c | 15 ++++++++++++++-
 binutils/readelf.c | 15 ++++++++++++++-
 3 files changed, 46 insertions(+), 5 deletions(-)

diff --git a/binutils/bucomm.c b/binutils/bucomm.c
index b8deff5..864ab96 100644
--- a/binutils/bucomm.c
+++ b/binutils/bucomm.c
@@ -570,7 +570,15 @@ off_t
 get_file_size (const char * file_name)
 {
   struct stat statbuf;
-  
+  int f, t;
+  t = -1;
+  f = open (file_name, O_RDONLY | O_BINARY);
+  if (f != 0)
+    {
+      t = isatty (f);
+      close (f);
+    }
+
   if (stat (file_name, &statbuf) < 0)
     {
       if (errno == ENOENT)
@@ -579,8 +587,15 @@ get_file_size (const char * file_name)
 	non_fatal (_("Warning: could not locate '%s'.  reason: %s"),
 		   file_name, strerror (errno));
     }  
-  else if (! S_ISREG (statbuf.st_mode))
-    non_fatal (_("Warning: '%s' is not an ordinary file"), file_name);
+  else if (! S_ISREG (statbuf.st_mode) || t > 0)
+    {
+#ifdef _WIN32
+      /* libtool passes /dev/null and checks for /dev/null in the output */
+      if (stricmp (file_name, "nul") == 0)
+        file_name = "/dev/null";
+#endif
+      non_fatal (_("Warning: '%s' is not an ordinary file"), file_name);
+    }
   else if (statbuf.st_size < 0)
     non_fatal (_("Warning: '%s' has negative size, probably it is too large"),
                file_name);
diff --git a/binutils/elfedit.c b/binutils/elfedit.c
index 5f21382..553d634 100644
--- a/binutils/elfedit.c
+++ b/binutils/elfedit.c
@@ -441,6 +441,14 @@ static int
 check_file (const char *file_name, struct stat *statbuf_p)
 {
   struct stat statbuf;
+  int f, t;
+  t = -1;
+  f = open (file_name, O_RDONLY | O_BINARY);
+  if (f != 0)
+    {
+      t = isatty (f);
+      close (f);
+    }
 
   if (statbuf_p == NULL)
     statbuf_p = &statbuf;
@@ -455,8 +463,13 @@ check_file (const char *file_name, struct stat *statbuf_p)
       return 1;
     }
 
-  if (! S_ISREG (statbuf_p->st_mode))
+  if (! S_ISREG (statbuf_p->st_mode) || t > 0)
     {
+#ifdef _WIN32
+      /* libtool passes /dev/null and checks for /dev/null in the output */
+      if (stricmp (file_name, "nul") == 0)
+        file_name = "/dev/null";
+#endif
       error (_("'%s' is not an ordinary file\n"), file_name);
       return 1;
     }
diff --git a/binutils/readelf.c b/binutils/readelf.c
index 59d3381..af92d5b 100644
--- a/binutils/readelf.c
+++ b/binutils/readelf.c
@@ -15561,6 +15561,14 @@ process_file (char * file_name)
   struct stat statbuf;
   char armag[SARMAG];
   int ret;
+  int f, t;
+  t = -1;
+  f = open (file_name, O_RDONLY | O_BINARY);
+  if (f != 0)
+    {
+      t = isatty (f);
+      close (f);
+    }
 
   if (stat (file_name, &statbuf) < 0)
     {
@@ -15572,8 +15580,13 @@ process_file (char * file_name)
       return 1;
     }
 
-  if (! S_ISREG (statbuf.st_mode))
+  if (! S_ISREG (statbuf.st_mode) || t > 0)
     {
+#ifdef _WIN32
+      /* libtool passes /dev/null and checks for /dev/null in the output */
+      if (stricmp (file_name, "nul") == 0)
+        file_name = "/dev/null";
+#endif
       error (_("'%s' is not an ordinary file\n"), file_name);
       return 1;
     }
-- 
2.5.0


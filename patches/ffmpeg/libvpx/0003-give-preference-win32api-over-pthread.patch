diff --git a/vpx_mem/vpx_mem_tracker.c b/vpx_mem/vpx_mem_tracker.c
index 613e8a1..7b2dda4 100644
--- a/vpx_mem/vpx_mem_tracker.c
+++ b/vpx_mem/vpx_mem_tracker.c
@@ -28,12 +28,12 @@
 # include <lddk.h>
 #endif
 
-#if HAVE_PTHREAD_H
-# include <pthread.h>
-#elif defined(WIN32) || defined(_WIN32_WCE)
+#if defined(WIN32) || defined(_WIN32_WCE)
 # define WIN32_LEAN_AND_MEAN
 # include <windows.h>
 # include <winbase.h>
+#elif HAVE_PTHREAD_H
+# include <pthread.h>
 #elif defined(VXWORKS)
 # include <sem_lib.h>
 #endif
@@ -102,10 +102,10 @@ struct memory_tracker {
   unsigned int current_allocated,
            max_allocated;
 
-#if HAVE_PTHREAD_H
-  pthread_mutex_t mutex;
-#elif defined(WIN32) || defined(_WIN32_WCE)
+#if defined(WIN32) || defined(_WIN32_WCE)
   HANDLE mutex;
+#elif HAVE_PTHREAD_H
+  pthread_mutex_t mutex;
 #elif defined(VXWORKS)
   SEM_ID mutex;
 #elif defined(NO_MUTEX)
@@ -171,14 +171,14 @@ int vpx_memory_tracker_init(int padding_size, int pad_value) {
       memtrack.padding_size = padding_size;
       memtrack.pad_value    = pad_value;
 
-#if HAVE_PTHREAD_H
-      ret = pthread_mutex_init(&memtrack.mutex,
-                               NULL);            /*mutex attributes (NULL=default)*/
-#elif defined(WIN32) || defined(_WIN32_WCE)
+#if defined(WIN32) || defined(_WIN32_WCE)
       memtrack.mutex = CreateMutex(NULL,   /*security attributes*/
                                    FALSE,  /*we don't want initial ownership*/
                                    NULL);  /*mutex name*/
       ret = !memtrack.mutex;
+#elif HAVE_PTHREAD_H
+      ret = pthread_mutex_init(&memtrack.mutex,
+                               NULL);            /*mutex attributes (NULL=default)*/
 #elif defined(VXWORKS)
       memtrack.mutex = sem_bcreate(SEM_Q_FIFO, /*SEM_Q_FIFO non-priority based mutex*/
                                    SEM_FULL);  /*SEM_FULL initial state is unlocked*/
@@ -641,10 +641,10 @@ static int memory_tracker_lock_mutex() {
 
   if (g_b_mem_tracker_inited) {
 
-#if HAVE_PTHREAD_H
-    ret = pthread_mutex_lock(&memtrack.mutex);
-#elif defined(WIN32) || defined(_WIN32_WCE)
+#if defined(WIN32) || defined(_WIN32_WCE)
     ret = WaitForSingleObject(memtrack.mutex, INFINITE);
+#elif HAVE_PTHREAD_H
+    ret = pthread_mutex_lock(&memtrack.mutex);
 #elif defined(VXWORKS)
     ret = sem_take(memtrack.mutex, WAIT_FOREVER);
 #endif
@@ -670,10 +670,10 @@ static int memory_tracker_unlock_mutex() {
 
   if (g_b_mem_tracker_inited) {
 
-#if HAVE_PTHREAD_H
-    ret = pthread_mutex_unlock(&memtrack.mutex);
-#elif defined(WIN32) || defined(_WIN32_WCE)
+#if defined(WIN32) || defined(_WIN32_WCE)
     ret = !ReleaseMutex(memtrack.mutex);
+#elif HAVE_PTHREAD_H
+    ret = pthread_mutex_unlock(&memtrack.mutex);
 #elif defined(VXWORKS)
     ret = sem_give(memtrack.mutex);
 #endif

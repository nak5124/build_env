diff --git a/session.c b/session.c
index e4dadc9..9e9e5de 100644
--- a/session.c
+++ b/session.c
@@ -103,8 +103,13 @@ session_find_by_id(u_int id)
 /* Create a new session. */
 struct session *
 session_create(const char *name, int argc, char **argv, const char *path,
+#ifdef __MSYS__
+    int cwd, struct environ *env, struct termios *tio, int idx, u_int sx,
+    u_int sy, char **cause)
+#else /* __MSYS__ */
     const char *cwd, struct environ *env, struct termios *tio, int idx,
     u_int sx, u_int sy, char **cause)
+#endif /* __MSYS__ */
 {
 	struct session	*s;
 	struct winlink	*wl;
@@ -113,7 +118,11 @@ session_create(const char *name, int argc, char **argv, const char *path,
 	s->references = 1;
 	s->flags = 0;
 
+#ifdef __MSYS__
+	s->cwd = dup(cwd);
+#else /* __MSYS__ */
 	s->cwd = xstrdup(cwd);
+#endif /* __MSYS__ */
 
 	s->curw = NULL;
 	TAILQ_INIT(&s->lastw);
@@ -223,7 +232,11 @@ session_destroy(struct session *s)
 		winlink_remove(&s->windows, wl);
 	}
 
+#ifdef __MSYS__
+	close(s->cwd);
+#else /* __MSYS__ */
 	free((void *)s->cwd);
+#endif /* __MSYS__ */
 
 	session_unref(s);
 }
@@ -314,7 +327,11 @@ session_previous_session(struct session *s)
 /* Create a new window on a session. */
 struct winlink *
 session_new(struct session *s, const char *name, int argc, char **argv,
+#ifdef __MSYS__
+    const char *path, int cwd, int idx, char **cause)
+#else /* __MSYS__ */
     const char *path, const char *cwd, int idx, char **cause)
+#endif /* __MSYS__ */
 {
 	struct window	*w;
 	struct winlink	*wl;
diff --git a/tmux.h b/tmux.h
index 886392f..6f7f5a1 100644
--- a/tmux.h
+++ b/tmux.h
@@ -838,7 +838,11 @@ struct window_pane {
 	int		 argc;
 	char	       **argv;
 	char		*shell;
+#ifdef __MSYS__
+	int		 cwd;
+#else /* __MSYS__ */
 	const char	*cwd;
+#endif /* __MSYS__ */
 
 	pid_t		 pid;
 	char		 tty[TTY_NAME_MAX];
@@ -985,7 +989,11 @@ struct session {
 	u_int		 id;
 
 	char		*name;
+#ifdef __MSYS__
+	int		 cwd;
+#else /* __MSYS__ */
 	const char	*cwd;
+#endif /* __MSYS__ */
 
 	struct timeval	 creation_time;
 	struct timeval	 last_attached_time;
@@ -1991,8 +1999,13 @@ struct window	*window_find_by_id(u_int);
 void		 window_update_activity(struct window *);
 struct window	*window_create1(u_int, u_int);
 struct window	*window_create(const char *, int, char **, const char *,
+#ifdef __MSYS__
+		     const char *, int, struct environ *, struct termios *,
+		     u_int, u_int, u_int, char **);
+#else /* __MSYS__ */
 		     const char *, const char *, struct environ *,
 		     struct termios *, u_int, u_int, u_int, char **);
+#endif /* __MSYS__ */
 void		 window_destroy(struct window *);
 struct window_pane *window_get_active_at(struct window *, u_int, u_int);
 struct window_pane *window_find_string(struct window *, const char *);
@@ -2019,7 +2032,11 @@ struct window_pane *window_pane_find_by_id(u_int);
 struct window_pane *window_pane_create(struct window *, u_int, u_int, u_int);
 void		 window_pane_destroy(struct window_pane *);
 int		 window_pane_spawn(struct window_pane *, int, char **,
+#ifdef __MSYS__
+		     const char *, const char *, int, struct environ *,
+#else /* __MSYS__ */
 		     const char *, const char *, const char *, struct environ *,
+#endif /* __MSYS__ */
 		     struct termios *, char **);
 void		 window_pane_resize(struct window_pane *, u_int, u_int);
 void		 window_pane_alternate_on(struct window_pane *,
@@ -2153,8 +2170,13 @@ struct session	*session_find(const char *);
 struct session	*session_find_by_id_str(const char *);
 struct session	*session_find_by_id(u_int);
 struct session	*session_create(const char *, int, char **, const char *,
+#ifdef __MSYS__
+		     int, struct environ *, struct termios *, int, u_int,
+		     u_int, char **);
+#else /* __MSYS__ */
 		     const char *, struct environ *, struct termios *, int,
 		     u_int, u_int, char **);
+#endif /* __MSYS__ */
 void		 session_destroy(struct session *);
 void		 session_unref(struct session *);
 int		 session_check_name(const char *);
@@ -2162,7 +2184,11 @@ void		 session_update_activity(struct session *, struct timeval *);
 struct session	*session_next_session(struct session *);
 struct session	*session_previous_session(struct session *);
 struct winlink	*session_new(struct session *, const char *, int, char **,
+#ifdef __MSYS__
+		     const char *, int, int, char **);
+#else /* __MSYS__ */
 		     const char *, const char *, int, char **);
+#endif /* __MSYS__ */
 struct winlink	*session_attach(struct session *, struct window *, int,
 		     char **);
 int		 session_detach(struct session *, struct winlink *);
diff --git a/window.c b/window.c
index 7f2b227..1c0d34e 100644
--- a/window.c
+++ b/window.c
@@ -315,8 +315,13 @@ window_create1(u_int sx, u_int sy)
 
 struct window *
 window_create(const char *name, int argc, char **argv, const char *path,
+#ifdef __MSYS__
+    const char *shell, int cwd, struct environ *env, struct termios *tio,
+    u_int sx, u_int sy, u_int hlimit, char **cause)
+#else /* __MSYS__ */
     const char *shell, const char *cwd, struct environ *env,
     struct termios *tio, u_int sx, u_int sy, u_int hlimit, char **cause)
+#endif /* __MSYS__ */
 {
 	struct window		*w;
 	struct window_pane	*wp;
@@ -735,7 +740,11 @@ window_pane_create(struct window *w, u_int sx, u_int sy, u_int hlimit)
 	wp->argc = 0;
 	wp->argv = NULL;
 	wp->shell = NULL;
+#ifdef __MSYS__
+	wp->cwd = -1;
+#else /* __MSYS__ */
 	wp->cwd = NULL;
+#endif /* __MSYS__ */
 
 	wp->fd = -1;
 	wp->event = NULL;
@@ -798,7 +807,11 @@ window_pane_destroy(struct window_pane *wp)
 
 	RB_REMOVE(window_pane_tree, &all_window_panes, wp);
 
+#ifdef __MSYS__
+	close(wp->cwd);
+#else /* __MSYS__ */
 	free((void *)wp->cwd);
+#endif /* __MSYS__ */
 	free(wp->shell);
 	cmd_free_argv(wp->argc, wp->argv);
 	free(wp);
@@ -806,12 +819,20 @@ window_pane_destroy(struct window_pane *wp)
 
 int
 window_pane_spawn(struct window_pane *wp, int argc, char **argv,
+#ifdef __MSYS__
+    const char *path, const char *shell, int cwd, struct environ *env,
+#else /* __MSYS__ */
     const char *path, const char *shell, const char *cwd, struct environ *env,
+#endif /* __MSYS__ */
     struct termios *tio, char **cause)
 {
 	struct winsize	 ws;
 	char		*argv0, *cmd, **argvp;
+#ifdef __MSYS__
+	const char	*ptr, *first;
+#else /* __MSYS__ */
 	const char	*ptr, *first, *home;
+#endif /* __MSYS__ */
 	struct termios	 tio2;
 #ifdef HAVE_UTEMPTER
 	char		 s[32];
@@ -831,9 +852,15 @@ window_pane_spawn(struct window_pane *wp, int argc, char **argv,
 		free(wp->shell);
 		wp->shell = xstrdup(shell);
 	}
+#ifdef __MSYS__
+	if (cwd != -1) {
+		close(wp->cwd);
+		wp->cwd = dup(cwd);
+#else /* __MSYS__ */
 	if (cwd != NULL) {
 		free((void *)wp->cwd);
 		wp->cwd = xstrdup(cwd);
+#endif /* __MSYS__ */
 	}
 
 	cmd = cmd_stringify_argv(wp->argc, wp->argv);
@@ -852,10 +879,15 @@ window_pane_spawn(struct window_pane *wp, int argc, char **argv,
 		free(cmd);
 		return (-1);
 	case 0:
+#ifdef __MSYS__
+		if (fchdir(wp->cwd) != 0)
+			chdir("/");
+#else /* __MSYS__ */
 		if (chdir(wp->cwd) != 0) {
 			if ((home = find_home()) == NULL || chdir(home) != 0)
 				chdir("/");
 		}
+#endif /* __MSYS__ */
 
 		if (tcgetattr(STDIN_FILENO, &tio2) != 0)
 			fatal("tcgetattr failed");
-- 
2.6.2


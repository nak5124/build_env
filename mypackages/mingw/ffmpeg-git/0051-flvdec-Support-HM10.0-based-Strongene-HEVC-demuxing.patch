From cc94d590e9080aecff95abd853bcbbd9c77fe71f Mon Sep 17 00:00:00 2001
From: Yusuke Nakamura <muken.the.vfrmaniac@gmail.com>
Date: Mon, 21 Oct 2013 06:29:47 +0900
Subject: [PATCH 51/66] flvdec: Support HM10.0-based Strongene HEVC demuxing.

---
 libavformat/flv.h    |  1 +
 libavformat/flvdec.c | 69 ++++++++++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 68 insertions(+), 2 deletions(-)

diff --git a/libavformat/flv.h b/libavformat/flv.h
index df5ce3d..2b28cd8 100644
--- a/libavformat/flv.h
+++ b/libavformat/flv.h
@@ -109,6 +109,7 @@ enum {
     FLV_CODECID_H264    = 7,
     FLV_CODECID_REALH263= 8,
     FLV_CODECID_MPEG4   = 9,
+    FLV_CODECID_HM10    = 13, /* HEVC/H.265 / HM 10.0 Strongene Ltd. (non-standard) */
 };
 
 enum {
diff --git a/libavformat/flvdec.c b/libavformat/flvdec.c
index 345be1e..88cc5fe 100644
--- a/libavformat/flvdec.c
+++ b/libavformat/flvdec.c
@@ -231,6 +231,8 @@ static int flv_same_video_codec(AVCodecContext *vcodec, int flags)
         return vcodec->codec_id == AV_CODEC_ID_VP6A;
     case FLV_CODECID_H264:
         return vcodec->codec_id == AV_CODEC_ID_H264;
+    case FLV_CODECID_HM10:
+        return vcodec->codec_id == AV_CODEC_ID_HEVC;
     default:
         return vcodec->codec_tag == flv_codecid;
     }
@@ -272,6 +274,9 @@ static int flv_set_video_codec(AVFormatContext *s, AVStream *vstream,
         vcodec->codec_id = AV_CODEC_ID_H264;
         vstream->need_parsing = AVSTREAM_PARSE_HEADERS;
         return 3;     // not 4, reading packet type will consume one byte
+    case FLV_CODECID_HM10:
+        vcodec->codec_id = AV_CODEC_ID_HEVC;
+        return 3;     // not 4, reading packet type will consume one byte
     case FLV_CODECID_MPEG4:
         vcodec->codec_id = AV_CODEC_ID_MPEG4;
         return 3;
@@ -678,6 +683,53 @@ static void clear_index_entries(AVFormatContext *s, int64_t pos)
     }
 }
 
+static int flv_make_fake_hvcc(uint8_t **extradata, int *size)
+{
+    int i, cnt;
+    uint8_t *avcc;
+    uint8_t *hvcc;
+    uint8_t *hvcc_org = av_mallocz(*size + 22 +
+                                   FF_INPUT_BUFFER_PADDING_SIZE);
+    if (!hvcc_org)
+        return AVERROR(ENOMEM);
+
+    hvcc = hvcc_org + 21;
+    avcc = *extradata + 4;
+
+    *hvcc_org = 1; /* configurationVersion */
+    *(hvcc++) = *(avcc++) & 0x03; /* lengthSizeMinusOne */
+    *(hvcc++) = 2; /* numOfArrays */
+
+    /* SPS */
+    *(hvcc++) = 33;
+    cnt = *(avcc++) & 0x1f;
+    *(hvcc++) = 0;
+    *(hvcc++) = cnt;
+    for (i = 0; i < cnt; i++) {
+        int nalsize = AV_RB16(avcc) + 2;
+        memcpy(hvcc, avcc, nalsize);
+        hvcc += nalsize;
+        avcc += nalsize;
+    }
+
+    /* PPS */
+    *(hvcc++) = 34;
+    cnt = *(avcc++);
+    *(hvcc++) = 0;
+    *(hvcc++) = cnt;
+    for (i = 0; i < cnt; i++) {
+        int nalsize = AV_RB16(avcc) + 2;
+        memcpy(hvcc, avcc, nalsize);
+        hvcc += nalsize;
+        avcc += nalsize;
+    }
+
+    av_free(*extradata);
+    *extradata = hvcc_org;
+    *size      = hvcc - hvcc_org;
+    return 0;
+}
+
 static int amf_skip_tag(AVIOContext *pb, AMFDataType type)
 {
     int nb = -1, ret, parse_name = 1;
@@ -976,12 +1028,15 @@ retry_duration:
         st->codec->codec_id = AV_CODEC_ID_TEXT;
     }
 
-    if (st->codec->codec_id == AV_CODEC_ID_AAC ||
+    if (st->codec->codec_id == AV_CODEC_ID_AAC  ||
         st->codec->codec_id == AV_CODEC_ID_H264 ||
+        st->codec->codec_id == AV_CODEC_ID_HEVC ||
         st->codec->codec_id == AV_CODEC_ID_MPEG4) {
         int type = avio_r8(s->pb);
         size--;
-        if (st->codec->codec_id == AV_CODEC_ID_H264 || st->codec->codec_id == AV_CODEC_ID_MPEG4) {
+        if (st->codec->codec_id == AV_CODEC_ID_H264 ||
+            st->codec->codec_id == AV_CODEC_ID_HEVC ||
+            st->codec->codec_id == AV_CODEC_ID_MPEG4) {
             // sign extension
             int32_t cts = (avio_rb24(s->pb) + 0xff800000) ^ 0xff800000;
             pts = dts + cts;
@@ -1003,11 +1058,21 @@ retry_duration:
             if (st->codec->extradata) {
                 if ((ret = flv_queue_extradata(flv, s->pb, stream_type, size)) < 0)
                     return ret;
+                if (st->codec->codec_id == AV_CODEC_ID_HEVC) {
+                    if ((ret = flv_make_fake_hvcc(&flv->new_extradata[stream_type],
+                                                  &flv->new_extradata_size[stream_type])) < 0)
+                        return ret;
+                }
                 ret = AVERROR(EAGAIN);
                 goto leave;
             }
             if ((ret = flv_get_extradata(s, st, size)) < 0)
                 return ret;
+            if (st->codec->codec_id == AV_CODEC_ID_HEVC) {
+                if ((ret = flv_make_fake_hvcc(&st->codec->extradata,
+                                              &st->codec->extradata_size)) < 0)
+                    return ret;
+            }
 
             /* Workaround for buggy Omnia A/XE encoder */
             t = av_dict_get(s->metadata, "Encoder", NULL, 0);
-- 
2.4.3

